food         1   2   3   4   5
飽足感       10   3   2  15   9
         0   1   2   3   4   5

n = 5
m = 有幾組要算

l, r = 從第 l 個吃到第 r 個，總共的飽足感。

1 3   -->  15 = 10 + 3 + 2
2 5   -->  29 =  3 + 2 + 15 + 9
2 3   -->   5 =  3 + 2
4 5   -->  24 = 15 + 9

solution 1:

int sum = 0;
for (int i = l ; i <= r ; i++){
	sum = sum + 第 i 個食物的飽足感
}

- time complexity: O(mn)  --> result: TLE

solution 2: dynamic programming (動態規劃)
核心概念：把重複運算的部分，存起來，之後要算的時候，可以直接取出來用。

目標：從第 l 個吃到第 r 個，總共的飽足感  ==  第 1 個吃到第 r 個的飽足感 - 第 1 個吃到第 l-1 個的飽足感

dp[i] == 第 1 個吃到第 i 個的飽足感

dp[0] = 0;
for (int i = 0 ; i < n ; i++){
	dp[i+1] = dp[i] + food[i+1]	
}

- time complexity: O(n)

dp[r] - dr[l-1]  --> answer 只需要做一次的運算

- time complexity: O(m)

- total time complexity: O(m+n)
- space complexity: O(n)
